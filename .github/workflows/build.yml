name: build

on:
  workflow_dispatch:
    inputs:
      platform:
        description: 'list of platforms to build for'
        type: string
        required: false
        default: "amd64,arm64"

      python:
        description: 'list of python versions MAJOR.MINOR to build for'
        type: string
        required: false
        default: "3.12"

      wheel:
        description: 'name of wheel to use for build'
        type: string
        required: true
        default: "xmlsec"

      version:
        description: 'version of wheel to build'
        type: string
        required: true
        default: "1.3.16"

jobs:
  # ╔═════════════════════════════════════════════════════╗
  # ║                                                     ║
  # ║                                                     ║
  # ║               CREATE PLATFORM MATRIX                ║
  # ║                                                     ║
  # ║                                                     ║
  # ╚═════════════════════════════════════════════════════╝
  matrix:
    runs-on: ubuntu-latest
    outputs:
      stringify: ${{ steps.setup-matrix.outputs.stringify }}

    steps:
      - name: matrix / setup list
        id: setup-matrix
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const platforms = "${{ github.event.inputs.platform }}".split(",");
            const pythons = "${{ github.event.inputs.python }}".split(",");
            const matrix = {include:[]};
            for(const platform of platforms){
              for(const python of pythons){
                switch(platform){
                  case "amd64": matrix.include.push({python:python, platform:platform, runner:"ubuntu-24.04"}); break;
                  case "arm64": matrix.include.push({python:python, platform:platform, runner:"ubuntu-24.04-arm"}); break;
                  case "arm/v7": matrix.include.push({python:python, platform:platform, runner:"ubuntu-24.04-arm"}); break;
                }
              }
            }
            const stringify = JSON.stringify(matrix);
            core.setOutput('stringify', stringify);
            core.info(stringify);

  # ╔═════════════════════════════════════════════════════╗
  # ║                                                     ║
  # ║                                                     ║
  # ║                    BUILD WHEEL                      ║
  # ║                                                     ║
  # ║                                                     ║
  # ╚═════════════════════════════════════════════════════╝
  build:
    needs: matrix
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.matrix.outputs.stringify) }}

    steps:
      # CHECKOUT REPO
      - name: init / checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      # SETUP ENVIRONMENT
      - name: init / environment
        run: |
          echo "MATRIX_PLATFORM_SANITIZED=$(echo ${{ matrix.platform }} | sed 's#/##')" >> "${GITHUB_ENV}"

      # SETUP QEMU
      - name: init / setup qemu
        if: matrix.platform == 'arm/v7'
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0
        with:
          image: tonistiigi/binfmt
          cache-image: false

      # SETUP BUILDX BUILDER WITH USING LOCAL REGISTRY TO STORE IMAGE
      - name: init / setup buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1
        with:
          driver-opts: network=host

      # BUILD WHEEL INSIDE CONTAINER
      - name: wheel / build
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          context: .
          file: ${{ github.event.inputs.wheel }}.dockerfile
          platforms: linux/${{ matrix.platform }}
          tags: wheel
          outputs: type=docker,dest=${{ runner.temp }}/wheel.${{ matrix.python }}.${{ env.MATRIX_PLATFORM_SANITIZED }}.tar
          build-args: |
            PYTHON_VERSION=${{ matrix.python }}
            WHEEL_VERSION=${{ github.event.inputs.version }}

      # SAVE ARTIFACT IN CACHE
      - name: wheel / cache artifact
        uses: actions/upload-artifact@v4
        with:
          name: wheel.${{ matrix.python }}.${{ env.MATRIX_PLATFORM_SANITIZED }}
          path: ${{ runner.temp }}/wheel.${{ matrix.python }}.${{ env.MATRIX_PLATFORM_SANITIZED }}.tar


  # ╔═════════════════════════════════════════════════════╗
  # ║                                                     ║
  # ║                                                     ║
  # ║                   EXTRACT WHEEL                     ║
  # ║                                                     ║
  # ║                                                     ║
  # ╚═════════════════════════════════════════════════════╝
  extract:
    needs: 
      - build
      - matrix
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.matrix.outputs.stringify) }}

    permissions:
      contents: write

    steps:
      # CHECKOUT REPO
      - name: init / checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      # SETUP ENVIRONMENT
      - name: init / environment
        run: |
          echo "MATRIX_PLATFORM_SANITIZED=$(echo ${{ matrix.platform }} | sed 's#/##')" >> "${GITHUB_ENV}"

      # GET ARTIFACT CACHE
      - name: init / retreive artifact cache
        uses: actions/download-artifact@v4
        with:
          name: wheel.${{ matrix.python }}.${{ env.MATRIX_PLATFORM_SANITIZED }}
          path: ${{ runner.temp }}

      # EXTRACT WHEEL
      - name: extract / wheel
        run: |
          docker load --input ${{ runner.temp }}/wheel.${{ matrix.python }}.${{ env.MATRIX_PLATFORM_SANITIZED }}.tar
          docker run --rm -v ./whl:/.dist wheel